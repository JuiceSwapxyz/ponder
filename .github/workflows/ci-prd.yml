name: JuiceSwap Ponder PRD CI/CD

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      reset_schema:
        description: 'Create new schema version (resets database)'
        required: false
        default: false
        type: boolean


env:
  NODE_VERSION: '20'
  DOCKER_TAGS: dfxswiss/juiceswap-ponder:latest
  DEPLOY_INFO: ${{ github.ref_name }}-${{ github.sha }}
  AZURE_RESOURCE_GROUP: rg-dfx-api-prd
  AZURE_CONTAINER_APP: ca-dfx-jsp-prd

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx tsc --noEmit

      - name: Run tests
        run: npm test
        continue-on-error: true  # Tests not yet implemented

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_TAGS }}
          build-args: |
            NODE_ENV=production

  deploy:
    name: Deploy to PRD
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    steps:
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.DFX_PRD_CREDENTIALS }}

      - name: Stop existing container before deployment
        uses: azure/CLI@v2
        with:
          inlineScript: |
            echo "Stopping existing container app to prevent conflicts..."
            az containerapp stop --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_CONTAINER_APP }} || echo "Container was not running"
            echo "Waiting 10 seconds for complete shutdown..."
            sleep 10

      - name: Update Azure Container App with new image
        uses: azure/CLI@v2
        with:
          inlineScript: |
            echo "Updating container app with new image..."
            az containerapp update --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_CONTAINER_APP }} --image ${{ env.DOCKER_TAGS }} --set-env-vars DEPLOY_INFO=${{ env.DEPLOY_INFO }}${{ inputs.reset_schema == true && format(' PONDER_SCHEMA_VERSION={0}', github.run_number) || '' }}

      - name: Start container app
        uses: azure/CLI@v2
        with:
          inlineScript: |
            echo "Starting container app..."
            az containerapp start --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_CONTAINER_APP }}
            echo "Deployment completed successfully!"

      - name: Logout from Azure
        run: |
          az logout
        if: always()