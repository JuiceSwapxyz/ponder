{"version":3,"sources":["../src/config/config.ts","../src/index.ts"],"sourcesContent":["import type { Prettify } from \"@/types/utils.js\";\nimport type { Abi } from \"abitype\";\nimport type { Narrow, Transport } from \"viem\";\nimport type { GetAddress } from \"./address.js\";\nimport type { GetEventFilter } from \"./eventFilter.js\";\nimport type { NonStrictPick } from \"./utilityTypes.js\";\n\nexport type BlockConfig = {\n  /** Block number at which to start indexing events (inclusive). If `undefined`, events will be processed from block 0. Default: `undefined`. */\n  startBlock?: number;\n  /** Block number at which to stop indexing events (inclusive). If `undefined`, events will be processed in real-time. Default: `undefined`. */\n  endBlock?: number;\n};\n\ntype DatabaseConfig =\n  | {\n      kind: \"pglite\";\n      /** Directory path to use for PGlite database files. Default: `\".ponder/pglite\"`. */\n      directory?: string;\n    }\n  | {\n      kind: \"postgres\";\n      /** Postgres database connection string. Default: `DATABASE_PRIVATE_URL` > `DATABASE_URL` environment variable. */\n      connectionString?: string;\n      /** Postgres pool configuration passed to `node-postgres`. */\n      poolConfig?: {\n        /** Maximum number of clients in the pool. Default: `30`. */\n        max?: number;\n      };\n    };\n\nexport type NetworkConfig<network> = {\n  /** Chain ID of the network. */\n  chainId: network extends { chainId: infer chainId extends number }\n    ? chainId | number\n    : number;\n  /** A viem `http`, `webSocket`, or `fallback` [Transport](https://viem.sh/docs/clients/transports/http.html).\n   *\n   * __To avoid rate limiting, include a custom RPC URL.__ Usage:\n   *\n   * ```ts\n   * import { http } from \"viem\";\n   *\n   * const network = {\n   *    name: \"mainnet\",\n   *    chainId: 1,\n   *    transport: http(\"https://eth-mainnet.g.alchemy.com/v2/...\"),\n   * }\n   * ```\n   */\n  transport: Transport;\n  /** Polling interval (in ms). Default: `1_000`. */\n  pollingInterval?: number;\n  /** Maximum number of RPC requests per second. Default: `50`. */\n  maxRequestsPerSecond?: number;\n  /** Disable RPC request caching. Default: `false`. */\n  disableCache?: boolean;\n};\n\nexport type BlockFilterConfig = {\n  /** Block number at which to start indexing events (inclusive). If `undefined`, events will be processed from block 0. Default: `undefined`. */\n  startBlock?: number;\n  /** Block number at which to stop indexing events (inclusive). If `undefined`, events will be processed in real-time. Default: `undefined`. */\n  endBlock?: number;\n  interval?: number;\n};\n\ntype GetBlockFilter<\n  networks,\n  ///\n  allNetworkNames extends string = [keyof networks] extends [never]\n    ? string\n    : keyof networks & string,\n> = BlockFilterConfig & {\n  network:\n    | allNetworkNames\n    | {\n        [name in allNetworkNames]?: BlockFilterConfig;\n      };\n};\n\ntype AbiConfig<abi extends Abi | readonly unknown[]> = {\n  /** Contract application byte interface. */\n  abi: abi;\n};\n\ntype TransactionReceiptConfig = {\n  includeTransactionReceipts?: boolean;\n};\n\ntype FunctionCallConfig = {\n  /*\n   * Enable call trace indexing for this contract.\n   *\n   * - Docs: https://ponder.sh/docs/indexing/call-traces\n   */\n\n  includeCallTraces?: boolean;\n};\n\ntype GetNetwork<\n  networks,\n  contract,\n  abi extends Abi,\n  ///\n  allNetworkNames extends string = [keyof networks] extends [never]\n    ? string\n    : keyof networks & string,\n> = contract extends { network: infer network }\n  ? {\n      /**\n       * Network that this contract is deployed to. Must match a network name in `networks`.\n       * Any filter information overrides the values in the higher level \"contracts\" property.\n       * Factories cannot override an address and vice versa.\n       */\n      network:\n        | allNetworkNames\n        | {\n            [name in allNetworkNames]?: Prettify<\n              GetAddress<NonStrictPick<network, \"factory\" | \"address\">> &\n                GetEventFilter<abi, NonStrictPick<contract, \"filter\">> &\n                TransactionReceiptConfig &\n                FunctionCallConfig &\n                BlockConfig\n            >;\n          };\n    }\n  : {\n      /**\n       * Network that this contract is deployed to. Must match a network name in `networks`.\n       * Any filter information overrides the values in the higher level \"contracts\" property.\n       * Factories cannot override an address and vice versa.\n       */\n      network:\n        | allNetworkNames\n        | {\n            [name in allNetworkNames]?: Prettify<\n              GetAddress<unknown> &\n                GetEventFilter<abi, unknown> &\n                TransactionReceiptConfig &\n                FunctionCallConfig &\n                BlockConfig\n            >;\n          };\n    };\n\ntype ContractConfig<networks, contract, abi extends Abi> = Prettify<\n  AbiConfig<abi> &\n    GetNetwork<networks, NonStrictPick<contract, \"network\">, abi> &\n    GetAddress<NonStrictPick<contract, \"factory\" | \"address\">> &\n    GetEventFilter<abi, NonStrictPick<contract, \"filter\">> &\n    TransactionReceiptConfig &\n    FunctionCallConfig &\n    BlockConfig\n>;\n\ntype GetContract<networks = unknown, contract = unknown> = contract extends {\n  abi: infer abi extends Abi;\n}\n  ? // 1. Contract has a valid abi\n    ContractConfig<networks, contract, abi>\n  : // 2. Contract has an invalid abi\n    ContractConfig<networks, contract, Abi>;\n\ntype ContractsConfig<networks, contracts> = {} extends contracts\n  ? // contracts empty, return empty\n    {}\n  : {\n      [name in keyof contracts]: GetContract<networks, contracts[name]>;\n    };\n\ntype NetworksConfig<networks> = {} extends networks\n  ? {}\n  : {\n      [networkName in keyof networks]: NetworkConfig<networks[networkName]>;\n    };\n\ntype BlockFiltersConfig<\n  networks = unknown,\n  blocks = unknown,\n> = {} extends blocks\n  ? {}\n  : {\n      [name in keyof blocks]: GetBlockFilter<networks>;\n    };\n\nexport const createConfig = <\n  const networks,\n  const contracts = {},\n  const blocks = {},\n>(config: {\n  // TODO: add jsdoc to these properties.\n  networks: NetworksConfig<Narrow<networks>>;\n  contracts?: ContractsConfig<networks, Narrow<contracts>>;\n  database?: DatabaseConfig;\n  blocks?: BlockFiltersConfig<networks, blocks>;\n}): CreateConfigReturnType<networks, contracts, blocks> =>\n  config as Prettify<CreateConfigReturnType<networks, contracts, blocks>>;\n\nexport type Config = {\n  networks: { [networkName: string]: NetworkConfig<unknown> };\n  contracts: { [contractName: string]: GetContract };\n  database?: DatabaseConfig;\n  blocks: {\n    [sourceName: string]: GetBlockFilter<unknown>;\n  };\n};\n\nexport type CreateConfigReturnType<networks, contracts, blocks> = {\n  networks: networks;\n  contracts: contracts;\n  database?: DatabaseConfig;\n  blocks: blocks;\n};\n","export { createConfig } from \"@/config/config.js\";\nexport type {\n  Block,\n  Log,\n  Transaction,\n  TransactionReceipt,\n} from \"@/types/eth.js\";\nexport type { Virtual } from \"@/types/virtual.js\";\nexport {\n  type MergeAbis,\n  type ReplaceBigInts,\n  mergeAbis,\n  loadBalance,\n  rateLimit,\n  replaceBigInts,\n} from \"@ponder/utils\";\n\nimport type { Config } from \"@/config/config.js\";\nimport type { Prettify } from \"./types/utils.js\";\n\nexport type ContractConfig = Prettify<Config[\"contracts\"][string]>;\nexport type NetworkConfig = Prettify<Config[\"networks\"][string]>;\nexport type BlockConfig = Prettify<Config[\"blocks\"][string]>;\nexport type DatabaseConfig = Prettify<Config[\"database\"]>;\n\nexport {\n  onchainTable,\n  onchainSchema,\n  onchainEnum,\n  primaryKey,\n  hex,\n  bigint,\n} from \"@/drizzle/index.js\";\n\nexport { graphql } from \"@/graphql/middleware.js\";\n\nexport {\n  sql,\n  eq,\n  gt,\n  gte,\n  lt,\n  lte,\n  ne,\n  isNull,\n  isNotNull,\n  inArray,\n  notInArray,\n  exists,\n  notExists,\n  between,\n  notBetween,\n  like,\n  notIlike,\n  not,\n  asc,\n  desc,\n  and,\n  or,\n  count,\n  countDistinct,\n  avg,\n  avgDistinct,\n  sum,\n  sumDistinct,\n  max,\n  min,\n  relations,\n} from \"drizzle-orm\";\n\nexport {\n  bigint as int8,\n  boolean,\n  char,\n  cidr,\n  date,\n  doublePrecision,\n  inet,\n  integer,\n  interval,\n  json,\n  jsonb,\n  line,\n  macaddr,\n  macaddr8,\n  numeric,\n  point,\n  real,\n  smallint,\n  text,\n  time,\n  timestamp,\n  uuid,\n  varchar,\n  index,\n  uniqueIndex,\n  alias,\n  foreignKey,\n  union,\n  unionAll,\n  intersect,\n  intersectAll,\n  except,\n  exceptAll,\n} from \"drizzle-orm/pg-core\";\n"],"mappings":";;;;;;;;;;;AA0LO,IAAM,eAAe,CAI1B,WAOA;;;AC7LF;AAAA,EAGE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAqnames":["bigint"]}